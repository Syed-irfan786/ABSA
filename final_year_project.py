# -*- coding: utf-8 -*-
"""Final Year Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h8kLAIn445K-0VU8YtXKrjZmytXJ_ij0
"""

# !pip install transformers
import pandas as pd
import numpy as np
import nltk
# import transformers
from nltk.corpus import stopwords
from nltk.corpus import wordnet
from nltk.tokenize import word_tokenize, sent_tokenize
from nltk.stem.wordnet import WordNetLemmatizer

"""# Loading Dataset"""

df = pd.read_excel(r'Reviews.xlsx')
# print(df)

n1 = len(pd.unique(df['Before']))
n2 = len(pd.unique(df['After']))
n = df.nunique(axis=0)
print(n1)
print(n2)
print(n)

print(f"Unique Values from 2 Columns:\
{pd.concat([df['Before'],df['After']]).unique()}")

"""# Counting unique patterns from the data """

df2 = df[['Before', 'After']].value_counts(dropna=False).reset_index(name='Count of each patterns')
print(sum(df2['Count of each patterns']))
print(df2)

df3  =df.groupby(["Before", "After"], dropna=False).size()

df = df.drop(['Before','After'], axis=1)
df.shape

"""# Removing , . ! : ; _ - ? / ...."""

df.head(6)
list1  = df['Reviews']
df['Reviews'] = df['Reviews'].map(lambda x: x.replace(',',''))
df['Reviews'] = df['Reviews'].map(lambda x: x.replace('.',''))
df['Reviews'] = df['Reviews'].map(lambda x: x.replace('!',''))
df['Reviews'] = df['Reviews'].map(lambda x: x.replace("'",''))
df['Reviews'] = df['Reviews'].map(lambda x: x.replace(';',''))
df['Reviews'] = df['Reviews'].map(lambda x: x.replace(':',''))
df['Reviews'] = df['Reviews'].map(lambda x: x.replace('-',''))
df['Reviews'] = df['Reviews'].map(lambda x: x.replace('_',''))
df['Reviews'] = df['Reviews'].map(lambda x: x.replace('?',''))
df['Reviews'] = df['Reviews'].map(lambda x: x.replace('=',''))
df['Reviews'] = df['Reviews'].map(lambda x: x.replace('$',''))
df['Reviews'] = df['Reviews'].map(lambda x: x.replace('(',''))
df['Reviews'] = df['Reviews'].map(lambda x: x.replace(')',''))

"""# Finding sentiment score, sentiment value and Taging using POS Tagging and counting each tags and then graphical representation



"""

#for checking the sentiment score
from transformers import pipeline
sentiment_pipeline = pipeline("sentiment-analysis")
line = df["Reviews"].values.tolist()

sentiments = sentiment_pipeline(line)
print(type(sentiments))

sentiments_value=[]
for a in sentiments:
  sentiments_value.append(a['label'])

df['Sentiment'] = sentiments_value
df.head

def count_tags(tags):
    tag_count = {}
    for word, tag in tags:
        if tag in tag_count:
            tag_count[tag] += 1
        else:
            tag_count[tag] = 1
    return(tag_count)

from nltk import pos_tag 
nltk.download('averaged_perceptron_tagger')
tagged= df['Reviews'].str.split().map(pos_tag)
type(tagged)
df['tagged'] = tagged

tagged1 = pd.DataFrame(tagged)
tagged1['tag_counts'] = tagged1['Reviews'].map(count_tags)

tagged.head
tagged.shape

tag_set = list(set([tag for tags in tagged1['tag_counts'] for tag in tags]))
for tag in tag_set:
    tagged1[tag] = tagged1['tag_counts'].map(lambda x: x.get(tag, 0))
title = 'Frequency of POS Tags in Reviews'    
tagged1[tag_set].sum().sort_values().plot(kind='barh', logx=False, figsize=(20,12), title=title)

# df['tagged'][0]

"""# Experiment 1 :    Finding total nouns and nouns that are aspect too """

#Checking nouns that are noun as well as aspectsl

TP=0
TN=0
FP=0
FN=0
Actual_aspect=200
nn=[]
nouns=[]


temp=0
for a in df.index:
  aspect = df['Aspects'][a]
  tag = df['tagged'][a]
  # print(tag)

  #taking each tagged reviews
  for pos in tag:
    if (pos[1]=='NN' or pos[1]=='NNP' or pos[1]=='NNS' or pos[1]=='NNPS'):
      nn.append(pos[0])
      nouns.append(pos[0])
      

  # print(nn) 
  for noun in nn:
    if noun.casefold()==aspect.casefold() :
      TP = TP+1
      # print(noun  + aspect + str(a))
    else:
      FP=FP+1
  nn=[]    
    # print(pos[1])
  temp=temp+1
  # if(temp==14):
  #   # break    
  # print(nn)
  

print("True positive   = " + f'{TP}')
print("False Positive  = " + f'{FP}')
print("Total nouns     = " + f'{len(nouns)}')

Actual_aspect=200

recall = TP/(TP+FP)
precision = TP/(Actual_aspect)

print("Recall   = " + f'{recall}')
print("Precision   = " + f'{precision}')

"""# Counting UNIQUE NOUNS(Extra step)"""

#counting nouns that are aspect
count = 0
for a in nouns:
  for b in df.index:
    aspect = df['Aspects'][b]

    if aspect.casefold()==a.casefold() or aspect==a.casefold()  or aspect.casefold()==a :
      # print(aspect)
      count  = count+1
      break
print(count)

#finding unique nouns
import numpy as np
nouns_unique=np.unique(nouns)
print(len(nouns_unique))

aspect_unique = df['Aspects']

aspect_unique = np.unique(aspect_unique)
print(len(aspect_unique))

# tag1= df['tagged']
# count = 0
# for a in tag1: #column
#   for b in a: #one row iterate each tagged in row a
#     if(b[1]=='NN' or b[1]=='NNP' or b[1]=='NNS' or b[1]=='NNPS' ):
      
#       print(b[1])
    
    
#   break

"""# Experiment 2 :    DT + NOUN + VERB """

###########################################################################################
#pattern = DT + noun + Verb = 44 pattern
# Actual_aspect=200
TP=0
aspect=[]


temp=0
for tag, index in zip(df['tagged'],df.index):
  
  length = len(tag)
  for t, ind in zip(tag, range(length)): 
    if (tag[ind][1]=='NN' or tag[ind][1]=='NNP' or tag[ind][1]=='NNS' or tag[ind][1]=='NNPS'):
      nounaspect= tag[ind][0]
      
      if(ind==length-1):
        continue
      # if(ind==0):
      #   continue    
      
      if (tag[ind-1][1]=='DT') and (tag[ind+1][1]=='VB' or tag[ind+1][1]=='VBD' or tag[ind+1][1]=='VBG' or tag[ind+1][1]=='VBN' or tag[ind+1][1]=='VBP' or tag[ind+1][1]=='VBZ'):
        if(tag[ind][0]==df['Aspects'][index]):
          TP = TP+1
          # print(tag[ind][0] + "  " + f'{index}')
        aspect.append(tag[ind][1])

  length=0



Total_Pattern = 44 
Total_pattern_found = len(aspect)  #actual
print("Total nouns following this pattern --> ( DT + Noun + Verb )   =   " + f'{len(aspect)}')  
print("True positive   = " + f'{TP}')

recall = TP/Total_pattern_found
precision = TP/Total_Pattern

print("Recall   = " + f'{recall}')
print("Precision   = " + f'{precision}')

"""# Experiment 3 :    ADJ + NOUN + PREP """

###########################################################################################
#pattern = Adj  + noun + Prep = 20 pattern
# Actual_aspect=200
aspect=[]
TP = 0 

temp=0
for tag, index in zip(df['tagged'],df.index):
  
  length = len(tag)
  for t, ind in zip(tag, range(length)): 
    if (tag[ind][1]=='NN' or tag[ind][1]=='NNP' or tag[ind][1]=='NNS' or tag[ind][1]=='NNPS'):
      nounaspect= tag[ind][0]
      
      if(ind==length-1):
        continue
      # if(tag[ind-1][1]=='PRP' or tag[ind-1][1]=='PRP$'):
      #   print(tag[ind-1][0])  
      
      if (tag[ind-1][1]=='JJ' or tag[ind-1][1]=='JJR'or tag[ind-1][1]=='JJS') and tag[ind+1][1]=='IN':
        # print( tag[ind-1][0] + " " + tag[ind][0] + "  "+tag[ind+1][0]+" " + f'{index}')
        if(tag[ind][0]==df['Aspects'][index]):
          TP = TP+1
        aspect.append(tag[ind][0])

  length=0

 
Total_Pattern = 20 
Total_pattern_found = len(aspect)  #actual
print("Total nouns following this pattern --> ( Adj + Noun + Prep )   =   " + f'{len(aspect)}')  
print("True positive   = " + f'{TP}')

recall = TP/Total_pattern_found
precision = TP/Total_Pattern

print("Recall   = " + f'{recall}')
print("Precision   = " + f'{precision}')

"""# Experiment 4 :    ADJ + NOUN + Nan """

###########################################################################################
#pattern = Adj  + noun + Nan = 18 pattern
# Actual_aspect=200
aspect=[]
TP=0


temp=0
for tag, index in zip(df['tagged'],df.index):
  
  length = len(tag)
  for t, ind in zip(tag, range(length)): 
    
    if (tag[ind][1]=='NN' or tag[ind][1]=='NNP' or tag[ind][1]=='NNS' or tag[ind][1]=='NNPS'):
      nounaspect= tag[ind][0] 
      
      if (tag[ind-1][1]=='JJ' or tag[ind-1][1]=='JJR'or tag[ind-1][1]=='JJS') and ind == length-1:
        # print( tag[ind-1][0] + " " + tag[ind][0] + " " + f'{index}')
        if(tag[ind][0]==df['Aspects'][index]):
          TP = TP+1
        aspect.append(tag[ind][0])

  length=0


Total_Pattern = 18 
Total_pattern_found = len(aspect)  #actual
print("Total nouns following this pattern --> ( Adj + Noun + Nan )   =   " + f'{len(aspect)}')  
print("True positive   = " + f'{TP}')

recall = TP/Total_pattern_found
precision = TP/Total_Pattern

print("Recall   = " + f'{recall}')
print("Precision   = " + f'{precision}')



"""# **Experiment 5 : Combining Top 3 repeated Patterns**"""

#Combining the top 3 repeated patterns

###########################################################################################
#pattern = DT + noun + Verb = 82 pattern
# Actual_aspect=200
TP=0
aspect=[]


temp=0
for tag, index in zip(df['tagged'],df.index):
  
  length = len(tag)
  for t, ind in zip(tag, range(length)): 
    if (tag[ind][1]=='NN' or tag[ind][1]=='NNP' or tag[ind][1]=='NNS' or tag[ind][1]=='NNPS'):
      nounaspect= tag[ind][0]
      
      
        
      if(ind==length-1):
        if ((tag[ind-1][1]=='JJ' or tag[ind-1][1]=='JJR'or tag[ind-1][1]=='JJS') and ind == length-1):
          if(tag[ind][0]==df['Aspects'][index]):
            TP = TP+1
          
          # print(tag[ind][0] + "  " + f'{index}')
          aspect.append(tag[ind][1])
      elif((tag[ind-1][1]=='DT') and (tag[ind+1][1]=='VB' or tag[ind+1][1]=='VBD' or tag[ind+1][1]=='VBG' or tag[ind+1][1]=='VBN' or tag[ind+1][1]=='VBP' or tag[ind+1][1]=='VBZ')):
        if(tag[ind][0]==df['Aspects'][index]):
          TP = TP+1
          # print(tag[ind][0] + "  " + f'{index}')
        aspect.append(tag[ind][1])
      elif (tag[ind-1][1]=='JJ' or tag[ind-1][1]=='JJR'or tag[ind-1][1]=='JJS') and tag[ind+1][1]=='IN' :
        if(tag[ind][0]==df['Aspects'][index]):
          TP = TP+1
          # print(tag[ind][0] + "  " + f'{index}')
        aspect.append(tag[ind][1])
      


  length=0



Total_Pattern = 82 
Total_pattern_found = len(aspect)  #actual
print("Total nouns following the top 3 repeated patterns  =   " + f'{len(aspect)}')  
print("True positive   = " + f'{TP}')

recall = TP/Total_pattern_found
precision = TP/Total_Pattern

print("Recall   = " + f'{recall}')
print("Precision   = " + f'{precision}')

